// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: calculator/calculator_proto/calculator.proto

package calculator_proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Calculator struct {
	FirstNumber          int32    `protobuf:"varint,1,opt,name=first_number,json=firstNumber,proto3" json:"first_number,omitempty"`
	SecondNumer          int32    `protobuf:"varint,2,opt,name=second_numer,json=secondNumer,proto3" json:"second_numer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Calculator) Reset()         { *m = Calculator{} }
func (m *Calculator) String() string { return proto.CompactTextString(m) }
func (*Calculator) ProtoMessage()    {}
func (*Calculator) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfec716b6a94c06a, []int{0}
}
func (m *Calculator) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Calculator.Unmarshal(m, b)
}
func (m *Calculator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Calculator.Marshal(b, m, deterministic)
}
func (m *Calculator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Calculator.Merge(m, src)
}
func (m *Calculator) XXX_Size() int {
	return xxx_messageInfo_Calculator.Size(m)
}
func (m *Calculator) XXX_DiscardUnknown() {
	xxx_messageInfo_Calculator.DiscardUnknown(m)
}

var xxx_messageInfo_Calculator proto.InternalMessageInfo

func (m *Calculator) GetFirstNumber() int32 {
	if m != nil {
		return m.FirstNumber
	}
	return 0
}

func (m *Calculator) GetSecondNumer() int32 {
	if m != nil {
		return m.SecondNumer
	}
	return 0
}

type CalculatorServerRequest struct {
	Calculate            *Calculator `protobuf:"bytes,1,opt,name=calculate,proto3" json:"calculate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CalculatorServerRequest) Reset()         { *m = CalculatorServerRequest{} }
func (m *CalculatorServerRequest) String() string { return proto.CompactTextString(m) }
func (*CalculatorServerRequest) ProtoMessage()    {}
func (*CalculatorServerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfec716b6a94c06a, []int{1}
}
func (m *CalculatorServerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalculatorServerRequest.Unmarshal(m, b)
}
func (m *CalculatorServerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalculatorServerRequest.Marshal(b, m, deterministic)
}
func (m *CalculatorServerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalculatorServerRequest.Merge(m, src)
}
func (m *CalculatorServerRequest) XXX_Size() int {
	return xxx_messageInfo_CalculatorServerRequest.Size(m)
}
func (m *CalculatorServerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CalculatorServerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CalculatorServerRequest proto.InternalMessageInfo

func (m *CalculatorServerRequest) GetCalculate() *Calculator {
	if m != nil {
		return m.Calculate
	}
	return nil
}

type CalculatorServerResponse struct {
	ResultSum            int32    `protobuf:"varint,1,opt,name=result_sum,json=resultSum,proto3" json:"result_sum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CalculatorServerResponse) Reset()         { *m = CalculatorServerResponse{} }
func (m *CalculatorServerResponse) String() string { return proto.CompactTextString(m) }
func (*CalculatorServerResponse) ProtoMessage()    {}
func (*CalculatorServerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfec716b6a94c06a, []int{2}
}
func (m *CalculatorServerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalculatorServerResponse.Unmarshal(m, b)
}
func (m *CalculatorServerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalculatorServerResponse.Marshal(b, m, deterministic)
}
func (m *CalculatorServerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalculatorServerResponse.Merge(m, src)
}
func (m *CalculatorServerResponse) XXX_Size() int {
	return xxx_messageInfo_CalculatorServerResponse.Size(m)
}
func (m *CalculatorServerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CalculatorServerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CalculatorServerResponse proto.InternalMessageInfo

func (m *CalculatorServerResponse) GetResultSum() int32 {
	if m != nil {
		return m.ResultSum
	}
	return 0
}

func init() {
	proto.RegisterType((*Calculator)(nil), "CalculatorExample.calculator")
	proto.RegisterType((*CalculatorServerRequest)(nil), "CalculatorExample.CalculatorServerRequest")
	proto.RegisterType((*CalculatorServerResponse)(nil), "CalculatorExample.CalculatorServerResponse")
}

func init() {
	proto.RegisterFile("calculator/calculator_proto/calculator.proto", fileDescriptor_dfec716b6a94c06a)
}

var fileDescriptor_dfec716b6a94c06a = []byte{
	// 240 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x49, 0x4e, 0xcc, 0x49,
	0x2e, 0xcd, 0x49, 0x2c, 0xc9, 0x2f, 0xd2, 0x47, 0x30, 0xe3, 0x0b, 0x8a, 0xf2, 0x4b, 0xf2, 0x91,
	0x04, 0xf4, 0xc0, 0x02, 0x42, 0x82, 0xce, 0x70, 0x11, 0xd7, 0x8a, 0xc4, 0xdc, 0x82, 0x9c, 0x54,
	0xa5, 0x20, 0x2e, 0x2e, 0x84, 0x32, 0x21, 0x45, 0x2e, 0x9e, 0xb4, 0xcc, 0xa2, 0xe2, 0x92, 0xf8,
	0xbc, 0xd2, 0xdc, 0xa4, 0xd4, 0x22, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xd6, 0x20, 0x6e, 0xb0, 0x98,
	0x1f, 0x58, 0x08, 0xa4, 0xa4, 0x38, 0x35, 0x39, 0x3f, 0x2f, 0x05, 0xa4, 0x26, 0xb5, 0x48, 0x82,
	0x09, 0xa2, 0x04, 0x22, 0xe6, 0x07, 0x12, 0x52, 0x0a, 0xe3, 0x12, 0x47, 0x58, 0x14, 0x9c, 0x5a,
	0x54, 0x96, 0x5a, 0x14, 0x94, 0x5a, 0x58, 0x9a, 0x5a, 0x5c, 0x22, 0x64, 0xcd, 0xc5, 0x09, 0xb3,
	0x2e, 0x15, 0x6c, 0x3a, 0xb7, 0x91, 0xac, 0x1e, 0x86, 0xab, 0xf4, 0x10, 0x4e, 0x0a, 0x42, 0xa8,
	0x57, 0xb2, 0xe4, 0x92, 0xc0, 0x34, 0xb7, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x55, 0x48, 0x96, 0x8b,
	0xab, 0x28, 0xb5, 0xb8, 0x34, 0xa7, 0x24, 0xbe, 0xb8, 0x34, 0x17, 0xea, 0x6e, 0x4e, 0x88, 0x48,
	0x70, 0x69, 0xae, 0x51, 0x1d, 0x97, 0x30, 0x4c, 0x6b, 0x6a, 0x70, 0x69, 0x2e, 0x48, 0x73, 0x66,
	0x72, 0xaa, 0x50, 0x3a, 0xd4, 0xf7, 0x60, 0x41, 0x21, 0x2d, 0x2c, 0x2e, 0xc1, 0xe1, 0x11, 0x29,
	0x6d, 0xa2, 0xd4, 0x42, 0x1c, 0xa7, 0xc4, 0xe0, 0x24, 0x1c, 0x25, 0x88, 0x11, 0x3f, 0x49, 0x6c,
	0x60, 0xca, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x71, 0x82, 0x96, 0x26, 0xc5, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CalculateSumServiceClient is the client API for CalculateSumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalculateSumServiceClient interface {
	// Unary
	CalcuteSum(ctx context.Context, in *CalculatorServerRequest, opts ...grpc.CallOption) (*CalculatorServerResponse, error)
}

type calculateSumServiceClient struct {
	cc *grpc.ClientConn
}

func NewCalculateSumServiceClient(cc *grpc.ClientConn) CalculateSumServiceClient {
	return &calculateSumServiceClient{cc}
}

func (c *calculateSumServiceClient) CalcuteSum(ctx context.Context, in *CalculatorServerRequest, opts ...grpc.CallOption) (*CalculatorServerResponse, error) {
	out := new(CalculatorServerResponse)
	err := c.cc.Invoke(ctx, "/CalculatorExample.CalculateSumService/calcuteSum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculateSumServiceServer is the server API for CalculateSumService service.
type CalculateSumServiceServer interface {
	// Unary
	CalcuteSum(context.Context, *CalculatorServerRequest) (*CalculatorServerResponse, error)
}

// UnimplementedCalculateSumServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCalculateSumServiceServer struct {
}

func (*UnimplementedCalculateSumServiceServer) CalcuteSum(ctx context.Context, req *CalculatorServerRequest) (*CalculatorServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalcuteSum not implemented")
}

func RegisterCalculateSumServiceServer(s *grpc.Server, srv CalculateSumServiceServer) {
	s.RegisterService(&_CalculateSumService_serviceDesc, srv)
}

func _CalculateSumService_CalcuteSum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculatorServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculateSumServiceServer).CalcuteSum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CalculatorExample.CalculateSumService/CalcuteSum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculateSumServiceServer).CalcuteSum(ctx, req.(*CalculatorServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CalculateSumService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CalculatorExample.CalculateSumService",
	HandlerType: (*CalculateSumServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "calcuteSum",
			Handler:    _CalculateSumService_CalcuteSum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calculator/calculator_proto/calculator.proto",
}
